assert(load(Base64Decode("mapIndex = GetGame().map.index

function OnLoad()
	enemyHeroes = GetEnemyHeroes()

	Config = scriptConfig("myVision", "myVision")

	Config:addSubMenu("Way Points", "wayPoints")
		Config.wayPoints:addParam("drawWorld", "Draw 3D", SCRIPT_PARAM_ONOFF, true)
		Config.wayPoints:addParam("drawMinimap", "Draw 2D", SCRIPT_PARAM_ONOFF, true)
		Config.wayPoints:addParam("drawETA", "Draw ETA", SCRIPT_PARAM_ONOFF, true)
		Config.wayPoints:addParam("drawX", "Draw Cross", SCRIPT_PARAM_ONOFF, true)

	Config.wayPoints:addSubMenu("Allies", "allies")
		Config.wayPoints.allies:addParam("enabled", "Enabled", SCRIPT_PARAM_ONOFF, true)
		Config.wayPoints.allies:addParam("color", "Color", SCRIPT_PARAM_COLOR, {255, 0, 255, 255})
		Config.wayPoints.allies:addParam(myHero.charName, myHero.charName, SCRIPT_PARAM_ONOFF, true)
		for _, ally in pairs(GetAllyHeroes()) do
			Config.wayPoints.allies:addParam(ally.charName, ally.charName, SCRIPT_PARAM_ONOFF, true)
		end

	Config.wayPoints:addSubMenu("Enemies", "axis")
		Config.wayPoints.axis:addParam("enabled", "Enabled", SCRIPT_PARAM_ONOFF, true)
		Config.wayPoints.axis:addParam("color", "Color", SCRIPT_PARAM_COLOR, {255, 255, 0, 0})
		for _, enemy in pairs(enemyHeroes) do
			Config.wayPoints.axis:addParam(enemy.charName, enemy.charName, SCRIPT_PARAM_ONOFF, true)
		end

	if mapIndex == 1 then
		Config:addSubMenu("Hidden Objects", "hiddenObjects")
			Config.hiddenObjects:addParam("drawAlly", "Draw ally wards", SCRIPT_PARAM_ONOFF, true)
			Config.hiddenObjects:addParam("drawAxis", "Draw enemy wards", SCRIPT_PARAM_ONOFF, true)
			Config.hiddenObjects:addParam("drawMinimap", "Draw on minimap", SCRIPT_PARAM_ONOFF, true)
			Config.hiddenObjects:addParam("notifyFOW", "Notify FOW wards", SCRIPT_PARAM_ONOFF, true)
			Config.hiddenObjects:addParam("useLFC", "Use lag-free circles", SCRIPT_PARAM_ONOFF, true)
	end

	Config:addSubMenu("Minimap Timers", "minimapTimers")
		Config.minimapTimers:addParam("enabled", "Enabled", SCRIPT_PARAM_ONOFF, true)
		Config.minimapTimers:addParam("hotkey", "Clear camp hotkey" , SCRIPT_PARAM_ONKEYDOWN, false, GetKey('K'))
		Config.minimapTimers:addParam("textSize", "Minimap text size", SCRIPT_PARAM_SLICE, 14, 10, 20, 0)
		Config.minimapTimers:addParam("textColor", "Minimap text color", SCRIPT_PARAM_COLOR, {255, 255, 255, 255})
		Config.minimapTimers:addParam("sendChatKey", "Send to chat on click hotkey", SCRIPT_PARAM_ONKEYDOWN, false, 0x10)

	Config:addSubMenu("Overhead HUD", "overheadHUD")
		Config.overheadHUD:addParam("drawAbilities", "Draw abilities", SCRIPT_PARAM_ONOFF, true)
		Config.overheadHUD:addParam("drawSummoners", "Draw summoner spells", SCRIPT_PARAM_ONOFF, true)
		Config.overheadHUD:addParam("showDetails", "Show details", SCRIPT_PARAM_ONKEYTOGGLE, false, 0x10)

	if mapIndex ~= 12 then
		Config:addSubMenu("Recall Tracker", "recallTracker")
			Config.recallTracker:addParam("drawMinimap", "Draw circle on minimap", SCRIPT_PARAM_ONOFF, true)
			Config.recallTracker:addParam("maxSize", "Maximum circle size", SCRIPT_PARAM_SLICE, 5000, 1000, 10000, 0)
	end

	Config:addParam("updateScript", "Update Script", SCRIPT_PARAM_ONOFF, false)
	Config.updateScript = false -- Make sure BoL doesn't save the value

	local oPrintChat = PrintChat
	PrintChat = function(input)
		oPrintChat("<font color=\"#AAAAAA\"><b>myVision</b>: </font><font color=\"#FFFFFF\">" .. input .. "</font>")
	end
	PrintError = function(input)
		oPrintChat("<font color=\"#AAAAAA\"><b>myVision</b>: </font><font color=\"#FF7777\">" .. input .. "</font>")
	end

	wayPoints()
	minimapTimers()
	if mapIndex == 1 then
		hiddenObjects()
	end
	if mapIndex ~= 12 then
		recallTracker()
	end
	connectionStatus()
	overheadHUD()

	local revision = 5
	if tonumber(GetWebResult("raw.github.com", "/Jo7j/BoL/master/myVision.rev")) > revision then
		PrintChat("A new update is available. Please update using the menu.")
	end
	PrintChat("<font color=\"#77FF77\">Loaded</font>")
end

function OnWndMsg(msg, wParam)
	if msg == WM_LBUTTONUP and Config.updateScript then
		Config.updateScript = false
		PrintChat("Updating")
		DownloadFile("https://raw.githubusercontent.com/Jo7j/BoL/master/myVision.lua", SCRIPT_PATH .. GetCurrentEnv().FILE_NAME,
			function()
				PrintChat("Update finished Please reload (F9).")
			end
		)
	end
end

function round(float)
	local down = math.floor(float)
	if float >= down + 0.5 then -- round up
		return math.ceil(float)
	else -- round down
		return math.floor(float)
	end
end

function DrawLFC(x, y, z, radius, color, quality)
	local radius = radius or 300
	local screenMin = WorldToScreen(D3DXVECTOR3(x - radius, y, z + radius))

	if OnScreen({x = screenMin.x, y = screenMin.y}, {x = screenMin.x, y = screenMin.y}) then
		local quality = quality and 2 * math.pi / quality or 2 * math.pi / math.floor(radius / 10)
		local a = WorldToScreen(D3DXVECTOR3(x + radius * math.cos(0), y, z - radius * math.sin(0)))

		for theta = quality, 2 * math.pi + quality, quality do
			local b = WorldToScreen(D3DXVECTOR3(x + radius * math.cos(theta), y, z - radius * math.sin(theta)))
			DrawLine(a.x, a.y, b.x, b.y, 1, color)
			a = b
		end
	end
end

function GetHPBarPos(unit)
	local barPos = GetUnitHPBarPos(unit)
	local barOffset = GetUnitHPBarOffset(unit)

	local t = {
		["Darius"] = -8,
		["Renekton"] = -8,
	}
	if t[unit.charName] then
		barPos.x = barPos.x + t[unit.charName]
	end
	return Point(barPos.x - 69, barPos.y + (barOffset.y * 50) - 6 - (unit.isMe and 6 or 0))
end

function CLoLPacket:DecodeString()
	local str = ""
	local byte = string.format("%c", self:Decode1())
	while byte ~= '\0' do
		str = str .. byte
		byte = string.format("%c", self:Decode1())
	end
	return str
end

class "wayPoints"

function wayPoints:__init()
	self.wayPointManager = WayPointManager()

	AddDrawCallback(function() self:OnDraw() end)
end

function wayPoints:OnDraw()
	for i = 1, heroManager.iCount do
		local hero = heroManager:getHero(i)
		if not hero.dead and hero.hasMovePath and (Config.wayPoints.allies.enabled and hero.team ~= TEAM_ENEMY and Config.wayPoints.allies[hero.charName]) or (Config.wayPoints.axis.enabled and hero.team == TEAM_ENEMY and Config.wayPoints.axis[hero.charName]) then
			local color = hero.team == TEAM_ENEMY and Config.wayPoints.axis.color or Config.wayPoints.allies.color
			local prevPath = Vector(hero)
			local fTime = 0 -- Estimated time of arrival

			for i = hero.pathIndex, hero.pathCount do
				local path = hero:GetPath(i)
				if path ~= nil then
					if Config.wayPoints.drawWorld then
						DrawLine3D(prevPath.x, prevPath.y, prevPath.z, path.x, path.y, path.z, 1, ARGB(color[1], color[2], color[3], color[4]))
					end

					if Config.wayPoints.drawMinimap and not hero.isMe then
						DrawLine(GetMinimapX(prevPath.x - 128), GetMinimapY(prevPath.z + 128), GetMinimapX(path.x - 128), GetMinimapY(path.z + 128), 1, ARGB(color[1], color[2], color[3], color[4]))
					end

					fTime = fTime + (GetDistance(prevPath, path) / hero.ms)

					prevPath = path
				end
			end

			local screenPos = WorldToScreen(D3DXVECTOR3(prevPath.x, prevPath.y, prevPath.z))

			if Config.wayPoints.drawETA then
				local seconds = math.round(fTime % 60)
				DrawText(math.floor(fTime / 60)..":".. (seconds > 9 and seconds or "0"..seconds), 16, screenPos.x - 10, screenPos.y + 7, ARGB(color[1], color[2], color[3], color[4]))
			end

			if Config.wayPoints.drawX then
				DrawLine(screenPos.x - 10, screenPos.y - 7, screenPos.x + 10, screenPos.y + 7, 5, ARGB(color[1], color[2] / 2, color[3] / 2, color[4] / 2))
				DrawLine(screenPos.x + 10, screenPos.y - 7, screenPos.x - 10, screenPos.y + 7, 5, ARGB(color[1], color[2] / 2, color[3] / 2, color[4] / 2))
			end
		end
	end
end

class "hiddenObjects"

function hiddenObjects:__init()
	self.hiddenObjects = {
		meta = {
			{duration = 25000, id = 6424612, name = "VisionWard", charName = "VisionWard", color = ARGB(255, 255, 0, 255), type = "pink"}, -- Vision Ward
			{duration = 180, id = 234594676, name = "SightWard", charName = "SightWard", color = ARGB(255, 0, 255, 0), type = "green"}, -- Stealth Ward
			{duration = 60, id = 263796881, name = "SightWard", charName = "YellowTrinket", color = ARGB(255, 0, 255, 0), type = "green"}, -- Warding Totem (Trinket)
			{duration = 120, id = 263796882, name = "SightWard", charName = "YellowTrinketUpgrade", color = ARGB(255, 0, 255, 0), type = "green"}, -- Warding Totem (Trinket) (Lvl.9)
			{duration = 180, id = 263796882, name = "SightWard", charName = "SightWard", color = ARGB(255, 0, 255, 0), type = "green"}, -- Greater Stealth Totem (Trinket)
			{duration = 25000, id = 194218338, name = "VisionWard", charName = "VisionWard", color = ARGB(255, 255, 0, 255), type = "pink"}, -- Greater Vision Totem (Trinket)
			{duration = 180, id = 177751558, name = "SightWard", charName = "SightWard", color = ARGB(255, 0, 255, 0), type = "green"}, -- Wriggle's Lantern
			{duration = 180, id = 135609454, name = "SightWard", charName = "SightWard", color = ARGB(255, 0, 255, 0), type = "green"}, -- Quill Coat
			{duration = 180, id = 101180708, name = "VisionWard", charName = "SightWard", color = ARGB(255, 0, 255, 0), type = "green"}, -- Ghost Ward
		},
		sprites = {
			GreenWard = FileExist(SPRITE_PATH .. "myVision\\minimap\\Minimap_Ward_Green_Enemy.tga") and createSprite("myVision\\minimap\\Minimap_Ward_Green_Enemy.tga"),
			PinkWard = FileExist(SPRITE_PATH .. "myVision\\minimap\\Minimap_Ward_Pink_Enemy.tga") and createSprite("myVision\\minimap\\Minimap_Ward_Pink_Enemy.tga"),
		},
		objects = {}
	}

	AddRecvPacketCallback(function(p) self:OnRecvPacket(p) end)
	AddDeleteObjCallback(function(object) self:OnDeleteObj(object) end)
	AddDrawCallback(function() self:OnDraw() end)

	if self.hiddenObjects.sprites.GreenWard then
		AddUnloadCallback(function()
			if self.hiddenObjects.sprites.GreenWard then
				self.hiddenObjects.sprites.GreenWard:Release()
			end
		end)
	end
	if self.hiddenObjects.sprites.PinkWard then
		AddUnloadCallback(function()
			if self.hiddenObjects.sprites.PinkWard then
				self.hiddenObjects.sprites.PinkWard:Release()
			end
		end)
	end
end

function hiddenObjects:OnRecvPacket(p)
	if p.header == 0xB5 then
		p.pos = 1
		local caster = objManager:GetObjectByNetworkId(p:DecodeF())
		if caster then
			p.pos = 12
			local id = p:Decode4()
			p.pos = 37
			local projectileId = p:Decode4()
			p.pos = 53
			local endPos = Vector(p:DecodeF(), p:DecodeF(), p:DecodeF())

			for _, meta in pairs(self.hiddenObjects.meta) do
				if id == meta.id then
					return table.insert(self.hiddenObjects.objects, {startT = GetInGameTimer(), pos = endPos, networkID = DwordToFloat(AddNum(projectileId, 2)), creator = caster, meta = meta})
				end
			end
		end
	elseif p.header == 0x07 then
		p.pos = 1
		local objectNetworkId = p:DecodeF()
		local creatorNetworkId = p:DecodeF()

		DelayAction(function()
			local object = objManager:GetObjectByNetworkId(objectNetworkId)
			local creator = objManager:GetObjectByNetworkId(creatorNetworkId)

			if object then
				local pos = Vector(object.x, object.y, object.z)

				for i, obj in pairs(self.hiddenObjects.objects) do -- Check if the object already exists
					if obj.networkID == object.networkID then
						obj.pos = pos -- Update the objects position
						return
					end
				end

				for _, meta in pairs(self.hiddenObjects.meta) do -- Find the object's meta data
					if meta.name == object.name and meta.charName == object.charName then
						return table.insert(self.hiddenObjects.objects, {startT = GetInGameTimer(), pos = pos, networkID = object.networkID, creator = creator, meta = meta})
					end
				end
			elseif Config.hiddenObjects.notifyFOW then
				PrintChat(creator.charName .. " has planted a ward")
			end
		end, 2.5)
	elseif p.header == 0x32 then
		p.pos = 1
		local networkID = p:DecodeF()
		for i, obj in ipairs(self.hiddenObjects.objects) do
			if obj.networkID and obj.networkID == networkID then
				table.remove(self.hiddenObjects.objects, i)
				break
			end
		end
	end
end

function hiddenObjects:OnDeleteObj(object)
	if object and object.valid and object.name:find("Ward") then
		for i, obj in ipairs(self.hiddenObjects.objects) do
			if object.networkID == obj.networkID or GetDistance(object, obj.pos) < 1 then -- Usually the object is deleted before we can get the networkID
				table.remove(self.hiddenObjects.objects, i)
				return
			end
		end
	end
end

function hiddenObjects:OnDraw()
	for i, obj in pairs(self.hiddenObjects.objects) do
		if obj.creator == nil or (obj.creator.team ~= TEAM_ENEMY and Config.hiddenObjects.drawAlly or obj.creator.team == TEAM_ENEMY and Config.hiddenObjects.drawAxis) then
			if GetInGameTimer() > obj.startT + obj.meta.duration then
				return table.remove(self.hiddenObjects.objects, i)
			end

			if Config.hiddenObjects.drawMinimap and obj.creator.team == TEAM_ENEMY then
				if obj.meta.type == "green" then
					if self.hiddenObjects.sprites.GreenWard then
						self.hiddenObjects.sprites.GreenWard:Draw(GetMinimapX(obj.pos.x-128), GetMinimapY(obj.pos.z+128), 255)
					else
						DrawRectangle(GetMinimapX(obj.pos.x-128), GetMinimapY(obj.pos.z+128), 5, 5, ARGB(255, 0, 255, 0))
					end
				elseif obj.meta.type == "pink" then
					if self.hiddenObjects.sprites.PinkWard then
						self.hiddenObjects.sprites.PinkWard:Draw(GetMinimapX(obj.pos.x-128), GetMinimapY(obj.pos.z+128), 255)
					else
						DrawRectangle(GetMinimapX(obj.pos.x-128), GetMinimapY(obj.pos.z+128), 5, 5, ARGB(255, 255, 0, 255))
					end
				end
			end

			if Config.hiddenObjects.useLFC then
				DrawLFC(obj.pos.x, obj.pos.y, obj.pos.z, 75, obj.meta.color, 10)
			else
				DrawCircle(obj.pos.x, obj.pos.y, obj.pos.z, 100, obj.meta.color)
			end

			local textColor = obj.creator.team == TEAM_ENEMY and ARGB(255, 255, 182, 193) or ARGB(255, 176, 226, 255)
			local t = (obj.startT + obj.meta.duration) - GetInGameTimer()
			if t < 10000 then
				local m = math.floor(t/60)
				local s = math.ceil(t%60)
				s = (s<10 and "0"..s) or s
				DrawText3D(m..":"..s, obj.pos.x, obj.pos.y, obj.pos.z, 16, textColor, true)
			end
			if obj.creator ~= nil then
				DrawText3D("\n"..obj.creator.charName, obj.pos.x, obj.pos.y, obj.pos.z, 16, textColor, true)
			else
				DrawText3D("\n?", obj.pos.x, obj.pos.y, obj.pos.z, 16, textColor, true)
			end
		end
	end
end

class "minimapTimers"

function minimapTimers:MouseOnMinimap()
	return CursorIsUnder(GetMinimapX(0), GetMinimapY(14527), WINDOW_W - GetMinimapX(0), WINDOW_H - GetMinimapY(14527))
end

function minimapTimers:__init()
	if mapIndex == 1 then --  Summoners Rift
		self.jungle = {
			{name = "b", team = TEAM_BLUE, spawnTime = 60+55, respawnTime = 5*60, position = {x = 3608, y = 7800}}, -- Bottom Blue
			{name = "wolves", team = TEAM_BLUE, spawnTime = 2*60+5, respawnTime = 50, position = {x = 3344, y = 6472}}, -- Bottom Wolves
			{name = "wraiths", team = TEAM_BLUE, spawnTime = 2*60+5, respawnTime = 50, position = {x = 6240, y = 5410}}, -- Bottom Wraiths
			{name = "r", team = TEAM_BLUE, spawnTime = 60+55, respawnTime = 5*60, position = {x = 7425, y = 4215}}, -- Bottom Red
			{name = "golems", team = TEAM_BLUE, spawnTime = 2*60+5, respawnTime = 50, position = {x = 7886, y = 2688}}, -- Bottom Golems
			{name = "d", team = TEAM_NEUTRAL, spawnTime = 2*60+30, respawnTime = 6*60, position = {x = 9465, y = 4348}}, -- Dragon
			{name = "b", team = TEAM_RED, spawnTime = 60+55, respawnTime = 5*60, position = {x = 10321, y = 7070}}, -- Top Blue
			{name = "wolves", team = TEAM_RED, spawnTime = 2*60+5, respawnTime = 50, position = {x = 10625, y = 8620}}, -- Top Wolves
			{name = "wraiths", team = TEAM_RED, spawnTime = 2*60+5, respawnTime = 50, position = {x = 7502, y = 9820}}, -- Top Wraiths
			{name = "r", team = TEAM_RED, spawnTime = 60+55, respawnTime = 5*60, position = {x = 6429, y = 11085}}, -- Top Red
			{name = "golems", team = TEAM_RED, spawnTime = 2*60+5, respawnTime = 50, position = {x = 5700, y = 12449}}, -- Top Golems
			{name = "b", team = TEAM_NEUTRAL, spawnTime = 15*60, respawnTime = 7*60, position = {x = 4542, y = 10771}}, -- Baron
			{name = "wight", team = TEAM_BLUE, spawnTime = 2*60+5, respawnTime = 50, position = {x = 1518, y = 8730}}, -- Bottom Wight
			{name = "wight", team = TEAM_RED, spawnTime = 2*60+5, respawnTime = 50, position = {x = 12357, y = 6762}},  -- Top Wight
		}
	elseif mapIndex == 8 then -- Crystal Scar
		self.jungle = {
			{name = "Heal", spawnTime = 2*60, respawnTime = 30, position = {x=4755, y=9421}}, -- 1
			{name = "Heal", spawnTime = 2*60, respawnTime = 30, position = {x=8753, y=9414}}, -- 2
			{name = "undefined", spawnTime = 0, respawnTime = 0, position = {x=0, y=0}}, -- 3
			{name = "undefined", spawnTime = 0, respawnTime = 0, position = {x=0, y=0}}, -- 4
			{name = "undefined", spawnTime = 0, respawnTime = 0, position = {x=0, y=0}}, -- 5
			{name = "Heal", spawnTime = 2*60, respawnTime = 30, position = {x=10052, y=1692}}, -- 6
			{name = "Heal", spawnTime = 2*60, respawnTime = 30, position = {x=3465, y=1692}}, -- 7
			{name = "Heal", spawnTime = 2*60, respawnTime = 30, position = {x=864, y=8369}}, -- 8
			{name = "Heal", spawnTime = 2*60, respawnTime = 30, position = {x=6750, y=12204}}, -- 9
			{name = "Heal", spawnTime = 2*60, respawnTime = 30, position = {x=12755, y=8406}}, -- 10
			{name = "Heal", spawnTime = 2*60, respawnTime = 30, position = {x=4118, y=5796}}, -- 11
			{name = "Heal", spawnTime = 2*60, respawnTime = 30, position = {x=9316, y=5650}}, -- 12
			{name = "Heal", spawnTime = 2*60, respawnTime = 30, position = {x=6750, y=3035}}, -- 13
		}
	elseif mapIndex == 10 then --  Twisted Treeline
		self.jungle = {
			{name = "wraiths", team = TEAM_BLUE, spawnTime = 60+40, respawnTime = 50, position = {x = 4319, y = 6019}}, -- Left Wraiths
			{name = "golems", team = TEAM_BLUE, spawnTime = 60+40, respawnTime = 50, position = {x = 5086, y = 8329}},  -- Left Golems
			{name = "wolves", team = TEAM_BLUE, spawnTime = 60+40, respawnTime = 50, position = {x = 6131, y = 6159}},  -- Left Wolves
			{name = "wraiths", team = TEAM_RED, spawnTime = 60+40, respawnTime = 50, position = {x = 10939, y = 6019}}, -- Right Wraiths
			{name = "golems", team = TEAM_RED, spawnTime = 60+40, respawnTime = 50, position = {x = 10312, y = 8329}},  -- Right Golems
			{name = "wolves", team = TEAM_RED, spawnTime = 60+40, respawnTime = 50, position = {x = 9197, y = 6159}},  -- Right Wolves
			{name = "heal", team = TEAM_NEUTRAL, spawnTime = 3*60, respawnTime = 60+30, position = {x = 7446, y = 7206}}, -- Heal
			{name = "v", team = TEAM_NEUTRAL, spawnTime = 10*60, respawnTime = 60*5, position = {x = 7664, y = 10359}}, -- Vilemaw
		}
	elseif mapIndex == 12 then -- Howling Abyss
		self.jungle = {
			{name = "Heal", spawnTime = 3*60+10, respawnTime = 40, position = {x=7431, y=7004}},
			{name = "Heal", spawnTime = 3*60+10, respawnTime = 40, position = {x=5760, y=5410}},
			{name = "Heal", spawnTime = 3*60+10, respawnTime = 40, position = {x=8723, y=8160}},
			{name = "Heal", spawnTime = 3*60+10, respawnTime = 40, position = {x=4663, y=4147}},
		}
	else
		PrintError(mapIndex .. "a not found [minimapTimers]")
		return
	end

	AddRecvPacketCallback(function(p) self:OnRecvPacket(p) end)
	AddDrawCallback(function() self:OnDraw() end)
	if mapIndex == 1 or mapIndex == 10 then
		AddMsgCallback(function(msg, wParam) self:OnWndMsg(msg, wParam) end)
	end
end

function minimapTimers:OnRecvPacket(p)
	if p.header == 195 then
		p.pos = 9
		local campID = mapIndex ~= 8 and p:Decode4() or p:Decode4() - 99
		if self.jungle[campID] ~= nil then
			self.jungle[campID].spawnTime = GetInGameTimer()+self.jungle[campID].respawnTime
		else
			PrintError("campID " .. campID .. " not found.")
		end
	elseif p.header == 233 then
		p.pos = 21
		local campID = mapIndex ~= 8 and p:Decode1() or p:Decode1() - 99
		if self.jungle[campID] ~= nil then
			self.jungle[campID].spawnTime = GetInGameTimer()-self.jungle[campID].respawnTime
		else
			PrintError("campID " .. campID .. " not found.")
		end
	end
end

function minimapTimers:OnWndMsg(msg, wParam)
	if msg == WM_LBUTTONDOWN and Config.minimapTimers.sendChatKey and self:MouseOnMinimap() then
		for i, camp in ipairs(self.jungle) do
			if GetDistance(mousePos, camp.position) < 1000 and GetInGameTimer() < camp.spawnTime then
				local campName = (camp.team == TEAM_ENEMY and "t" or camp.team ~= TEAM_NEUTRAL and "o" or "") .. camp.name
				local m = math.floor(camp.spawnTime / 60)
				local s = math.ceil (camp.spawnTime % 60)
				local spawnTime = m .. (s > 10 and s or s .. 0) .. " "
				SendChat(spawnTime .. campName)
				return
			end
		end
	end
end

function minimapTimers:OnDraw()
	if Config.minimapTimers.hotkey then
		for i, camp in ipairs(self.jungle) do
			if GetDistance(mousePos, camp.position) < 1000 then

				local p = CLoLPacket(195)
				p:Encode4(0)
				p:EncodeF(myHero.networkID)
				p:Encode4(i)
				p:Encode1(3)
				RecvPacket(p)

				self.jungle[i].spawnTime = GetInGameTimer()+self.jungle[i].respawnTime
				return
			end
		end
	end

	if Config.minimapTimers.enabled then
		for i, camp in ipairs(self.jungle) do
			if GetInGameTimer() < camp.spawnTime then
				local t = camp.spawnTime-GetInGameTimer()
				local m = math.floor(t/60)
				local s = math.ceil(t%60)
				s = (s<10 and "0"..s) or s
				DrawText(m..":"..s, Config.minimapTimers.textSize, GetMinimapX(camp.position.x), GetMinimapY(camp.position.y), ARGB(Config.minimapTimers.textColor[1], Config.minimapTimers.textColor[2], Config.minimapTimers.textColor[3], Config.minimapTimers.textColor[4]))
			end
		end
	end
end

class "overheadHUD"

function overheadHUD:__init()
	self.OHFrame = FileExist(SPRITE_PATH .. "myVision\\abilityFrame.png") and createSprite("myVision\\abilityFrame.png")

	self.summonerSprites = {
		summonerclairvoyance = FileExist(SPRITE_PATH .. "myVision\\spells\\SummonerClairvoyance.png") and createSprite("myVision\\spells\\SummonerClairvoyance.png"),
		summonerbarrier = FileExist(SPRITE_PATH .. "myVision\\spells\\SummonerBarrier.png") and createSprite("myVision\\spells\\SummonerBarrier.png"),
		summonerboost = FileExist(SPRITE_PATH .. "myVision\\spells\\SummonerBoost.png") and createSprite("myVision\\spells\\SummonerBoost.png"),
		summonerdot = FileExist(SPRITE_PATH .. "myVision\\spells\\SummonerDot.png") and createSprite("myVision\\spells\\SummonerDot.png"),
		summonerexhaust = FileExist(SPRITE_PATH .. "myVision\\spells\\SummonerExhaust.png") and createSprite("myVision\\spells\\SummonerExhaust.png"),
		summonerflash = FileExist(SPRITE_PATH .. "myVision\\spells\\SummonerFlash.png") and createSprite("myVision\\spells\\SummonerFlash.png"),
		summonerhaste = FileExist(SPRITE_PATH .. "myVision\\spells\\SummonerHaste.png") and createSprite("myVision\\spells\\SummonerHaste.png"),
		summonerheal = FileExist(SPRITE_PATH .. "myVision\\spells\\SummonerHeal.png") and createSprite("myVision\\spells\\SummonerHeal.png"),
		summonermana = FileExist(SPRITE_PATH .. "myVision\\spells\\SummonerMana.png") and createSprite("myVision\\spells\\SummonerMana.png"),
		summonerodingarrison = FileExist(SPRITE_PATH .. "myVision\\spells\\SummonerOdinGarrison.png") and createSprite("myVision\\spells\\SummonerOdinGarrison.png"),
		summonerrevive = FileExist(SPRITE_PATH .. "myVision\\spells\\SummonerRevive.png") and createSprite("myVision\\spells\\SummonerRevive.png"),
		summonersmite = FileExist(SPRITE_PATH .. "myVision\\spells\\SummonerSmite.png") and createSprite("myVision\\spells\\SummonerSmite.png"),
		summonerteleport = FileExist(SPRITE_PATH .. "myVision\\spells\\SummonerTeleport.png") and createSprite("myVision\\spells\\SummonerTeleport.png"),
	}
	self.summonerSprites.teleportcancel = self.summonerSprites.SummonerTeleport

	AddDrawCallback(function() self:OnDraw() end)
	AddUnloadCallback(function() self:OnUnload() end)
end


function overheadHUD:OnDraw()
	for i=1, heroManager.iCount do
		local hero = heroManager:GetHero(i)
		if hero and hero.valid and not hero.dead and hero.visible and not hero.isMe then
			local barPos = GetHPBarPos(hero)
			if OnScreen(barPos, barPos) then
				if Config.overheadHUD.drawAbilities then
					if self.OHFrame then
						self.OHFrame:Draw(barPos.x, barPos.y + 18, 255)
					end

					for spellId = _Q, _R do
						local spellData = hero:GetSpellData(spellId)
						if spellData.level > 0 then
							local x = barPos.x + 3 + (spellId * 26)
							local y = barPos.y + 20

							if spellData.currentCd == 0 and spellData.toggleState ~= 1 then
								DrawRectangle(x, y, 25, 3, (spellData.mana and hero.mana > spellData.mana) and ARGB(255, 35, 193, 26) or ARGB(255, 65, 105, 225))
							elseif spellData.toggleState == 1 then
								DrawRectangle(x, y, 25, 3, ARGB(255, 128, 0, 0))
							else
								local width = (spellData.totalCooldown -spellData.currentCd) / spellData.totalCooldown * 25
								DrawRectangle(x, y, 25, 3, ARGB(255, 128, 0, 0))
								DrawRectangle(x, y, width, 3, (spellData.mana and hero.mana > spellData.mana) and ARGB(255, 32, 128, 32) or ARGB(255, 65, 105, 225))
								if Config.overheadHUD.showDetails then
									local cd = tostring(round(spellData.currentCd))
									local textArea = GetTextArea(cd, 14)
									DrawText(cd, 14, x - (textArea.x / 2) + 12.5, y + 5, ARGB(255, 255, 255, 255))
								end
							end
						end
					end
				end

				if Config.overheadHUD.drawSummoners then
					for spellId = SUMMONER_1, SUMMONER_2 do
						local spellData = hero:GetSpellData(spellId)
						local x = barPos.x - 14
						local y = barPos.y + (spellId - SUMMONER_1) * 13
						if self.summonerSprites[spellData.name] then
							self.summonerSprites[spellData.name]:Draw(x, y, 255)
						end
						if spellData.currentCd > 0 then
							DrawRectangle(x, y, 13, 13, ARGB(128, 0, 0, 0))

							local cx = x + 6
							local cy = y + 6
							local angle = math.rad(-90 + ((spellData.totalCooldown - spellData.currentCd) / spellData.totalCooldown) * 360)
							DrawLine(cx, cy, cx + math.cos(angle) * 6, cy + math.sin(angle) * 6, 1, ARGB(255, 255, 255, 255))

							if Config.overheadHUD.showDetails then
								local cd = tostring(round(spellData.currentCd))
								local textArea = GetTextArea(cd, 14)
								DrawText(cd, 14, x - textArea.x - 2, y , ARGB(255, 255, 255, 255))
							end
						end
					end
				end
			end
		end
	end
end

function overheadHUD:OnUnload()
	if self.OHFrame then
		self.OHFrame:Release()
	end

	for _, sprite in pairs(self.summonerSprites) do
		if sprite then
			sprite:Release()
		end
	end
end

class "connectionStatus"

local STATUS_DISCONNECTED	= -1
local STATUS_CONNECTED		= 0
local STATUS_RECONNECTING	= 1

function connectionStatus:__init()
	AddRecvPacketCallback(function(p) self:OnRecvPacket(p) end)
end

function connectionStatus:OnRecvPacket(p)
	if p.header == 152 then -- Player disconnected
		p.pos = 5
		local networkID = p:DecodeF()
		for _, hero in pairs(enemyHeroes) do
			if hero.networkID == networkID then
				hero.connectionStatus = STATUS_DISCONNECTED
				return PrintChat(hero.charName .. " has <font color=\"#FF2222\">disconnected</font>")
			end
		end

		PrintError("A player has disconnected [connectionStatus]")
	elseif p.header == 0 then -- Player reconnecting
		for _, hero in pairs(enemyHeroes) do
			if hero.connectionStatus == STATUS_DISCONNECTED then
				hero.connectionStatus = STATUS_RECONNECTING
				return PrintChat(hero.charName .. " is <font color=\"#FF8C00\">reconnecting</font>")
			end
		end
		PrintError("A player is reconnecting [connectionStatus]")
	elseif p.header == 4 then -- Player reconnected
		for _, hero in pairs(enemyHeroes) do
			if hero.connectionStatus == STATUS_RECONNECTING then
				hero.connectionStatus = STATUS_CONNECTED
				return PrintChat(hero.charName .. " has <font color=\"#32CD32\">reconnected</font>")
			end
		end
		PrintError("A player has connected [connectionStatus]")
	end
end

class "recallTracker"

function recallTracker:__init()
	self.recallBar = FileExist(SPRITE_PATH .. "myVision\\RecallBar.png") and createSprite("myVision\\RecallBar.png")

	self.activeRecalls = {}

	AddRecvPacketCallback(function(p) self:OnRecvPacket(p) end)
	AdvancedCallback:bind("OnLoseVision", function(unit) self:OnLoseVision(unit) end)
	AddDrawCallback(function() self:OnDraw() end)
end

function recallTracker:OnRecvPacket(p)
	if p.header == 216 then -- Teleport/Recall packet
		p.pos = 5
		local sourceNetworkId = p:DecodeF()
		local source = objManager:GetObjectByNetworkId(sourceNetworkId)

		if source and source.team == TEAM_ENEMY then
			p.pos = 75
			local teleportType = p:DecodeString()

			if teleportType == "Recall" then
				local channelDuration = 8.0
				do
					p.pos = 139
					local recallType = p:DecodeString()

					if recallType == "recallimproved" then
						channelDuration = 7.0
					elseif recallType == "OdinRecall" then
						channelDuration = 4.5
					elseif recallType == "odinrecallimproved" then
						channelDuration = 4.0
					end
				end

				self.activeRecalls[sourceNetworkId] = { source = source, startT = GetInGameTimer(), channelDuration = channelDuration }
			else
				local recall = self.activeRecalls[sourceNetworkId]

				if recall then
					if recall.source.lastSeenT then
						recall.source.lastSeenT = recall.source.lastSeenT + (GetInGameTimer() - recall.startT)
					end

					if GetInGameTimer() > recall.startT + recall.channelDuration - 0.05 then
						PrintChat(recall.source.charName .. " has <font color=\"#1E90FF\">recalled</font>")
					end
					self.activeRecalls[sourceNetworkId] = nil
				end
			end
		end
	end
end

function recallTracker:OnLoseVision(unit)
	for _, recall in pairs(self.activeRecalls) do
		if recall.source.networkID == unit.networkID then
			recall.source.lastSeenT = GetInGameTimer()
			break
		end
	end
end

function recallTracker:OnDraw()
	local str = ""
	local x = WINDOW_W / 2 - 125
	local y = WINDOW_H - (WINDOW_H / 5)

	-- Count number of active recalls and compute string
	local recallCount = 0

	for _, recall in pairs(self.activeRecalls) do
		str = str .. recall.source.charName .. " + "
		recallCount = recallCount + 1
	end

	if recallCount == 0 then
		return
	else
		str = str:sub(1, -3) .. (recallCount > 1 and "are recalling" or "is recalling")
	end

	DrawRectangle(x, y, 250, 5, 0xC0000000)

	do
		local halfTextWidth = GetTextArea(str, 16).x / 2
		DrawText(str, 16, WINDOW_W / 2 - halfTextWidth, y - 25, ARGB(255, 255, 255, 255))
	end

	local i = 1
	for _, recall in pairs(self.activeRecalls) do
		local width = (recall.startT + recall.channelDuration - GetInGameTimer()) / recall.channelDuration * 250
		local alpha = (255 / recallCount) * i
		if self.recallBar then
			self.recallBar:DrawEx(Rect(0, 0, width, 5), D3DXVECTOR3(0,0,0), D3DXVECTOR3(x,y,0), alpha)
		else
			DrawRectangle(x, y, width, 5, ARGB(alpha, 255, 0, 0))
		end

		if Config.recallTracker.drawMinimap and not recall.source.visible and recall.source.lastSeenT then
			local distance = math.min(recall.source.ms * (recall.source.recallStart - recall.source.lastSeenT), Config.recallTracker.maxSize)
			local radius = GetMinimapX(recall.source.x + distance) - GetMinimapX(recall.source.x)
			DrawCircle2D(GetMinimapX(recall.source.x), GetMinimapY(recall.source.z), radius, 1, ARGB(255, 0, 255, 0))
		end

		i = i + 1
	end
end
"), nil, "bt", _ENV))()
